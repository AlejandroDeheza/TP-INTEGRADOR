import TP_INTEGRADOR_DR_CASA.*

describe "Tests de Dr Casa" {

///////////////////////////////////instancias de enfermedades/////////////////////////

	const malaria500 = new EnfermedadInfecciosa(cantCelulasQueAmenaza = 500)
	const malaria800 = new EnfermedadInfecciosa(cantCelulasQueAmenaza = 800)
	const otitis = new EnfermedadInfecciosa(cantCelulasQueAmenaza = 100)
	const lupus = new EnfermedadAutoinmune(cantCelulasQueAmenaza = 10000)
	
///////////////////////////////////instancias de personas/////////////////////////

	const logan = new Persona(cantidadCelulas = 3000000, 
		enfermedades = #{ malaria500, otitis, lupus }
	)
	const frank = new Persona(cantidadCelulas = 3500000)
	
	
/////////////////////// fixture y metodos auxiliares /////////////////////////////
	
	method loganViveUnDia(){
		logan.vivirUnDia()
	}
	
	method loganVive31Dias(){
		31.times{numero => logan.vivirUnDia()}
	}
	
	method noPoseeEnfermedadesAgresivas(unaPersona){
		return unaPersona.enfermedades().all{
			enfermedad => enfermedad.esAgresivaPara(unaPersona).negate()
		}
	}
	
	method cantidadCelulasAfectadas(unaPersona){
		if(self.noPoseeEnfermedadesAgresivas(unaPersona)){
			return 0
		}else{
			return unaPersona.enfermedades().filter{
				enfermedad => enfermedad.esAgresivaPara(unaPersona)
			}.sum{enfermedad => enfermedad.cantCelulasQueAmenaza()}
		}
	}
	
	method enfermedadQueMasCelulasAfecta(unaPersona){
		return unaPersona.enfermedades().max{
			enfermedad => enfermedad.cantCelulasQueAmenaza()
		}
	}

///////////////////////////////////// TESTS ///////////////////////////////////////

	test "Saber si la cantidad de células afectadas de Logan que estén afectadas 
	por enfermedades agresivas es igual a 0" {
		
		self.loganViveUnDia()
		assert.equals(self.cantidadCelulasAfectadas(logan), 0)
	}
	
	test "Saber si la enfermedad de Logan que más células afecta es el lupus"{
		
		self.loganViveUnDia()
		assert.equals(self.enfermedadQueMasCelulasAfecta(logan), lupus)
	}
	
	test "Saber si logan no esta en coma"{
		
		self.loganViveUnDia()
		assert.notThat(logan.estaEnComa())		
	}
	
	test "Logan vive 31 dias y se quiere saber si la cantidad de células afectadas de 
	Logan, que estén afectadas por enfermedades agresivas, es igual a 10000"{
		self.loganVive31Dias()
		assert.equals(self.cantidadCelulasAfectadas(logan), 10000)
	}
	
	test "Logan vive 31 dias y se quiere saber si la enfermedad de Logan que más 
	células afecta es el lupus"{
		
		self.loganVive31Dias()
		assert.equals(self.enfermedadQueMasCelulasAfecta(logan), lupus)
	}
	
	test "Logan vive 31 dias y se quiere saber si esta en coma"{
		
		self.loganVive31Dias()
		assert.that(logan.estaEnComa())		
	}
	
	test "saber si frank contrae enfermedades correctamente"{
		assert.equals(frank.enfermedades(), #{})
		frank.contraerEnfermedad(malaria800)
		assert.equals(frank.enfermedades(), #{malaria800})
		
	}
	
	test "saber si la malaria de 800 celulas afectadas, se reproduce correctamente"{
		assert.equals(malaria500.cantCelulasQueAmenaza(), 500)
		malaria500.reproducirse()
		assert.equals(malaria500.cantCelulasQueAmenaza(), 1000)
	}
	
}

